fds
ffasd
sd
ffasd
;
id
;
id;
bool
;
Boolean;
boolean;
True;
False;
false;
bool;
if true then 5 else 3;
ls
let
  val r = (True, 2);
in
;
;;
;
end;
let
  val r@(one, _) = (True, 2)
in
  case r of
    (_, _) => one
  | _ => False
end;
List.nth [0,1,2] 1
;
List.nth [1:2:3:4:[5]]
[2,3,4]
;
val r = [2,3,4];
List.nth r 2
;
List.nth (r,2);
List.nth ("rddew",2);
List.nth (String.explode "rddew",2);
[1..5]
;
List.tabulate(10, fn x => x);
999 * 999;
999 * 998;
List.explode Integer.toString(24543)
;
List.explode (Integer.toString(24543))
;
makestring
;
Int.toString(3242);
List.explode Int.toString(24543)
;
List.explode (Int.toString(24543));
explode (Int.toString(24543));
5 div 2;
import 004.sml
;
isPalindrome
;
isPalindrome 121
;
isPalindrome 7223432;
isPalindrome 8181818;
isPalindrome 9;
cartProdComb 3;
List.map (op * ) (cartProdComb 3)
;
(quicksort (op >)) (List.map (op * ) (cartProdComb 5))
;
